#version 450

struct Attenuation {
	float constant;
    float linear;
    float quadratic; 
};

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float specPow;
}; 

struct BaseLight {
	vec3 ambient;
	vec3 diffuse;
    vec3 specular;
};

struct DirectionalLight {
    vec3 direction;
    BaseLight light;
};

struct PointLight {
    vec3 position;
  
    Attenuation attenuation;
	BaseLight light;      
};

struct SpotLight {
    vec3 position;
    vec3 direction;

    float cutOff;
    float outerCutOff;
  
    Attenuation attenuation;
	BaseLight light;      
};

in VS_OUT {
	vec2 texture0;
	vec3 normal0;
	vec3 position0;
} fs_in;

out vec4 fragColor;

const int NUM_SPOT = 32;
const int NUM_POINT = 32;

uniform DirectionalLight dirLight;
uniform SpotLight spotLights[NUM_SPOT];
uniform PointLight pointLights[NUM_POINT];

uniform int numSpot;
uniform int numPoint;

